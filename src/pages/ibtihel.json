[{
    "id": 1,
    "mot_cles": [
        {
            "id": 1,
            "text": "Binary Dragonfly Algorithm",
            "created_at": "2023-12-22T11:58:46.648671Z",
            "updated_at": "2023-12-22T11:58:46.648738Z"
        },
        {
            "id": 2,
            "text": "Chaotic Maps",
            "created_at": "2023-12-22T11:59:06.206556Z",
            "updated_at": "2023-12-22T11:59:06.206606Z"
        },
        {
            "id": 3,
            "text": "Combinatorial Optimization Problem",
            "created_at": "2023-12-22T11:59:26.291872Z",
            "updated_at": "2023-12-22T11:59:26.291921Z"
        },
        {
            "id": 4,
            "text": "Dragonfly Algorithm",
            "created_at": "2023-12-22T11:59:35.189004Z",
            "updated_at": "2023-12-22T11:59:35.189052Z"
        },
        {
            "id": 5,
            "text": "Graph Coloring Problem",
            "created_at": "2023-12-22T11:59:45.841739Z",
            "updated_at": "2023-12-22T11:59:45.841789Z"
        },
        {
            "id": 6,
            "text": "Binary Dragonfly Algorithm",
            "created_at": "2023-12-22T12:05:22.142369Z",
            "updated_at": "2023-12-22T12:05:22.142418Z"
        },
        {
            "id": 7,
            "text": "Chaotic Maps",
            "created_at": "2023-12-22T12:05:23.050130Z",
            "updated_at": "2023-12-22T12:05:23.050187Z"
        },
        {
            "id": 8,
            "text": "Combinatorial Optimization Problem",
            "created_at": "2023-12-22T12:05:23.630228Z",
            "updated_at": "2023-12-22T12:05:23.630291Z"
        },
        {
            "id": 9,
            "text": "Dragonfly Algorithm",
            "created_at": "2023-12-22T12:05:24.331595Z",
            "updated_at": "2023-12-22T12:05:24.331647Z"
        },
        {
            "id": 10,
            "text": "Graph Coloring Problem",
            "created_at": "2023-12-22T12:05:25.011060Z",
            "updated_at": "2023-12-22T12:05:25.011083Z"
        }
    ],
    "auteurs": [
        {
            "id": 1,
            "institutions": [
                {
                    "id": 1,
                    "nom": "LMCS, Ecole supérieure d’informatique Alger, Oued smar, Algerie",
                    "created_at": "2023-12-22T11:58:19.097610Z",
                    "updated_at": "2023-12-22T11:58:19.097628Z"
                }
            ],
            "nom": "MEDFOUNI",
            "prenom": "Khitem",
            "created_at": "2023-12-22T12:02:14.328219Z",
            "updated_at": "2023-12-22T12:02:14.328270Z"
        },
        {
            "id": 3,
            "institutions": [
                {
                    "id": 1,
                    "nom": "LMCS, Ecole supérieure d’informatique Alger, Oued smar, Algerie",
                    "created_at": "2023-12-22T11:58:19.097610Z",
                    "updated_at": "2023-12-22T11:58:19.097628Z"
                }
            ],
            "nom": "Nakib",
            "prenom": "Ibtihel",
            "created_at": "2023-12-22T18:48:29.625516Z",
            "updated_at": "2023-12-22T18:48:29.625566Z"
        }
    ],
    "references_bibliographique": [
        {
            "id": 1,
            "nom": "Mohammed Mahseur received Master’s in Computer Sciences from the High School on Computer Sciences, E.S.I, ex INI, Algeria in 2001 and he is a PhD student",
            "created_at": "2023-12-22T12:01:17.599956Z",
            "updated_at": "2023-12-22T12:01:17.600004Z"
        },
        {
            "id": 2,
            "nom": "Mohammed Mahseur received Master’s in Computer Sciences from the High School on Computer Sciences, E.S.I, ex INI, Algeria in 2001 and he is a PhD student",
            "created_at": "2023-12-22T12:05:27.365281Z",
            "updated_at": "2023-12-22T12:05:27.365324Z"
        },
        {
            "id": 3,
            "nom": "Amar Ramdane-Cherif received his Ph.D. degree from Pierre and Marie university of Paris in 1998 in neural networks and IA optimization for robotic applications. Since 2000, he has been associate Professor in the laboratory PRISM, University of Versailles, SaintQuentin en Yvelines, France. His main current research interests include: software architecture and formal specification, dynamic architecture, architectural quality attributes, architectural styles and design patterns.",
            "created_at": "2023-12-22T18:49:23.790483Z",
            "updated_at": "2023-12-22T18:49:23.790532Z"
        },
        {
            "id": 4,
            "nom": "Manolo Dulva Hina is an associate professor in Computer Science at ECE Paris School of Engineering. He obtained his Ph.D. in Computer Science from the Université de Versailles St-Quentin-en-Yvelines in 2011 and his Ph.D. in Engineering from Université du Québec, Ecole de technologie supérieure in 2010. He has a master’s degree in Computer Science from Concordia University, Montreal, Canada and a bachelor’s degree in Computer Engineering from Mapua University (formerly Mapua Institute of Technology), Manila, Philippines. His research interests are in artificial intelligence, machine learning, multimodal computing, and formal specification.",
            "created_at": "2023-12-22T18:49:39.249138Z",
            "updated_at": "2023-12-22T18:49:39.249190Z"
        },
        {
            "id": 5,
            "nom": "Karim Baiche received his master’s degree in Applied Automation from the University of MHamed Bougara Boumerdes in 1998 and received his PhD from the University of MHamed Bougara Boumerdes, Algeria in 2014. He is currently an Associate Professor at the University of MHamed Bougara Boumerdes, Algeria. His main current research interests include: Signal Processing, System Diagnostics and evolutionary computation and metaheuristics.",
            "created_at": "2023-12-22T18:49:51.698026Z",
            "updated_at": "2023-12-22T18:49:51.698054Z"
        },
        {
            "id": 6,
            "nom": "Woo, T.-K., Su, S. Y., & Newman-Wolfe, R. (1991). Resource allocation in a dynamically partitionable bus network using a graph coloring algorithm. IEEE Transactions on Communications, 39(12), 1794–1801. doi:10.1109/26.120165",
            "created_at": "2023-12-22T18:50:36.828464Z",
            "updated_at": "2023-12-22T18:50:36.828504Z"
        }
    ],
    "titre": "Solving Graph Coloring Problem Using an Enhanced Binary Dragon fly Algorithm",
    "resume": "The graph coloring problem (GCP) is one of the most interesting classical combinatorial optimization problems in graph theory. It is known to be an NP-Hard problem, so many heuristic algorithms have been employed to solve this problem. In this article, the authors propose a new enhanced binary dragonfly algorithm to solve the graph coloring problem. The binary dragonfly algorithm has been enhanced by introducing two modifications. First, the authors use the Gaussian distribution random selection method for choosing the right value of the inertia weight w used to update the step vector (∆X). Second, the authors adopt chaotic maps to determine the random parameters s, a, c, f, and e. The aim of these modifications is to improve the performance and the efficiency of the binary dragonfly algorithm and ensure the diversity of solutions. The authors consider the well-known DIMACS benchmark graph coloring instances to evaluate the performance of their algorithm. The simulation results reveal the effectiveness and the successfulness of the proposed algorithm in comparison with some well-known algorithms in the literature.",
    "text_integral": "1. INTRODUCTION The Graph Coloring Problem (GCP) is a very well-known NP-Hard combinatorial optimization problem in computer science, mathematics, and operations research. It deals with assigning a color to each node of a given graph with the restriction that no two adjacent nodes are colored with the same color and that the number of different colors used is minimized. The minimum number of colors by which a graph can be colored is called its chromatic number and it is denoted by χ(G). A graph G is K-colorable if it can be legally colored with at most K colors. The graph coloring problem has recently drawn an increasing attention from researchers and has been widely used to model and solve many significant real-world problems, such as time tabling (de Werra, 1985), scheduling (Lotfi & Sarin, 1986; Dowsland & Thompson, 2005), computer register allocation (Chaitin, Cocke, Hopkins, & Markstein, 1981), (de Werra, Eisenbeis, Lelait, & Marmol, 1999), radio frequency assignment (Gamst, 1986), (Smith, Hurley, & Thiel, 1998), printed circuit board-testing (Garey, Johnson, & So, 1976), noise reduction in VLSI circuits (Maitra, Pal, Bhattacharyya, & Kim, 2010), channel routing (Sen Sarma, Mandal, & Seth, 1994), and communication networks (Woo, Su, & Newman-Wolfe, 1991). Several approaches have been adopted in solving this problem including greedy constructive approaches, local search heuristics, meta-heuristics and hybrid approaches. The two most constructive algorithms employed to solve the GCP are the recursive largest first algorithm (RLF) proposed by Leighton (Leighton, 1979) and the largest saturation degree algorithm (DSATUR) developed by Brélaz (Brélaz, 1979). These methods are based on greedy approach which colors the nodes of the graph one at time using a predefined greedy function. Recently, these approaches have been used to generate initial solutions for advanced evolutionary algorithms. Local search heuristics have been widely proposed to solve the GCP. Tabu Search Algorithm proposed by Hertz and de Werra (Hertz & de Werra, 1987) was the first local search algorithm applied to solve the graph coloring problem. It is called TABUCOL and has been improved by several researchers and used as a subcomponent of more graph coloring algorithms. Moreover, many efficient meta-heuristics such as Genetic Algorithm (GA) (Abbasian & Mouhoub, 2013), Cuckoo Search algorithm (CS) (Mahmoudi & Lotfi, 2015), Artificial Bee Colony (ABC) (Faraji & Javadi, 2011), Ant Based Algorithm(ABA) (Bui, Nguyen, Patel, & Phan, 2008), Particle Swarm Optimization (PSO) (Agrawal & Agrawal, 2015), Bat Algorithm (BA) (Djelloul, Sabba, & Chikhi, 2014), Memetic Algorithm (MA) (Lü & Hao, 2010), Firefly Algorithm (FA) (Chen & Kanoh, 2017), and combining algorithms (Douiri & Elbernoussi, 2015; Marappan & Sethumadhavan, 2018) have been employed in solving the Graph coloring problem. Abbasian and Mouhoub (Abbasian & Mouhoub, 2013) proposed a Hierarchical approach based on Parallel Genetic Algorithms (HPGAs) for solving the GCP. In this approach, a novel estimator is implemented to predict an upper-bound for the graph’s chromatic number. Furthermore, an extension of the genetic algorithm, namely the Genetic Modification (GM) and the parental success crossover operator have been proposed. Experimental results showed that the proposed approach was very accurate and faster in solving this problem. Mahmoudi and Lotfi (Mahmoudi & Lotfi, 2015) proposed a Modified Cuckoo Optimization Algorithm (MCOA) for solving the GCP. Cuckoo Optimization Algorithm (COA) was discretized by redefining, over discrete space, the standard arithmetic operators such as addition, subtraction, and multiplication that exist in COA migration operator based on the distance’s theory. Experimental results showed the high performance of this algorithm compared with other well-known heuristic search methods. Faraji and Javadi (Faraji & Javadi, 2011) proposed a new approach based on Bee Behavior in nature (BEECOL). Computational results revealed better performances of BEECOL compared to ACO algorithm. BEECOL has the capability of establishing a proper connection between accuracy and speed of coloring the graph. Bui et al. (Bui, Nguyen, Patel, & Phan, 2008) proposed an Ant-Based Algorithm (ABAC) to solve the GCP. Each ant in ABAC colors a portion of the graph using local information. Experimental results demonstrated that ABAC produced very consistent results. Agrawal and Agrawal (Agrawal & Agrawal, 2015) proposed an Acceleration Particle Swarm Optimization algorithm (APSO) for solving the GCP. In this method, acceleration coefficient values are updated on the basis of evaluation function. Experimental results validated the superiority of APSO compared with the standard PSO algorithm. Djelloul et al. (Djelloul, Sabba, & Chikhi, 2014) proposed a discrete Binary Bat Algorithm to solve the GCP. The Bat Algorithm is discretized using sigmoid function and binarization method. Simulation results showed the feasibility and effectiveness of the proposed algorithm. Lü and Hao (Lü & Hao, 2010) proposed a Memetic Algorithm, denoted MACOL, to solve the GCP. MACOL integrated several distinguished features such as an adaptive multi-parent crossover operator and a distance-and-quality-based replacement criteria for pool update. Experimental results demonstrated that this algorithm achieved highly competitive results compared with 11 state-of-the- art algorithms. Chen and Kanoh (Chen & Kanoh, 2017) proposed a discrete Firefly Algorithm based on similarity to solve the GCP. In this method, the original Firefly Algorithm is discretized directly based on similarity without hybrid algorithms. Experimental results showed that this algorithm obtained higher success-rate and lower average times compared with HDPSO and HDABC. Douiri and Elbarnoussi (Douiri & Elbernoussi, 2015) proposed a new hybrid approach called DBG. DBG is based on the hybridization of GA with a local search heuristic. This algorithm is based on the reduction of variables through a multiplier w of the surrogate constraint. Numerical results revealed that DBG achieved highly competitive results compared to other best existing algorithms in the literature. Marappan and Sethumadhavan (Marappan & Sethumadhavan, 2018) proposed three methods based on Genetic and Tabu Search procedure for solving the GCP. In these methods, a new Advanced Local Guided Search operator is used to improve the selected gene sequence before applying the crossover operation. Experimental results demonstrated that the proposed methods achieved fast stochastic convergence in finding the better near optimal solution compared to existing methods in the literature. In this paper, we propose a new Enhanced Binary Dragonfly Algorithm (EBDA) to solve the graph coloring problem. We introduce thus two modification methods into the binary dragonfly algorithm. In the first method, we use the Gaussian distribution random selection method to choose the right value of the inertia weight w used to update the step vector (∆X). In the second method, we adopt the most representative chaotic map, namely logistic map, to determine the random parameters s, a, c, f, and e. The aim of these contributions is to avoid the premature convergence to local optima, give a good balance between local exploitation and global exploration, and ensure the diversity of the solutions. To the best of our knowledge, this is the first work that proposes dragonfly algorithm to solve the graph coloring problem. The remainder of this paper is organized as follows. Section 2 presents the graph coloring problem formulation. Section 3 describes the dragonfly algorithm and the binary dragonfly algorithm. Section 4 proposes the enhanced binary dragonfly algorithm for the graph coloring problem. Section 5 gives simulation results and analysis of different algorithms in graph coloring",
    "url": "http://127.0.0.1:8000",
    "date_de_publication": "2023-12-19",
    "is_validated": true,
    "created_at": "2023-12-22T12:03:47.318168Z",
    "updated_at": "2023-12-22T18:51:58.983500Z"
} ]